---
description: Applies to all prompts to understand where to find/create/update files
globs: 
alwaysApply: false
---
# Project Structure Guide

This document outlines the structure of the AOLF GSEC project, which follows a modern full-stack architecture with separate frontend and backend services.

## Root Directory Structure

- `frontend/` - React/TypeScript frontend application
- `backend/` - Python/Flask backend API
- `terraform/` - Infrastructure as Code for production environment
- `terraform_uat/` - Infrastructure as Code for UAT environment
- `deployment/` - Deployment-related scripts and configurations
- `plans/` - Any plans for the project, including plans generated by prompts. Prefix the plan filename with the date.
- `.elasticbeanstalk/` - AWS Elastic Beanstalk configurations
- `.cursor/` - Cursor IDE specific configurations and rules

## Frontend Structure (`frontend/`)

The frontend is a React/TypeScript application with the following key directories:

- `src/` - Main source code directory
  - `components/` - Reusable React components
  - `pages/` - Page-level components and routes
  - `contexts/` - React context providers
  - `hooks/` - Custom React hooks
  - `utils/` - Utility functions and helpers
  - `models/` - Data models and interfaces
  - `config/` - Configuration files and constants
  - `styles/` - CSS and styling files
  - `types/` - TypeScript type definitions
  - `constants/` - Application constants
  - `docs/` - Documentation files
  - `App.js` - Main application component
  - `index.tsx` - Application entry point
- `public/` - Static assets and public files
- `build/` - Production build output
- `.github/` - GitHub Actions workflows
- Configuration files:
  - `package.json` - Node.js dependencies and scripts
  - `tsconfig.json` - TypeScript configuration
  - `deploy-frontend-*.sh` - Deployment scripts for different environments

## Backend Structure (`backend/`)

The backend is a Python/Flask application with the following key directories:

- `models/` - Database models and ORM definitions
  - Contains SQLAlchemy model definitions
  - Database table mappings and relationships
- `routers/` - API route handlers
  - API endpoint definitions
  - Request/response handlers
- `dependencies/` - Shared dependencies and utilities
  - Common dependencies used across the application
  - Shared business logic
- `middleware/` - Request/response middleware
  - Authentication middleware
  - Request processing middleware
  - Error handling middleware
- `static_data/` - Static data files
  - Reference data
  - Configuration data
- `utils/` - Utility functions
  - Helper functions
  - Common utilities
- `config/` - Configuration files
  - Environment configurations
  - Application settings
- `alembic/` - Database migration files
  - Migration scripts
  - Database version control
- `email_templates/` - Email template files
  - HTML email templates
  - Email content definitions
- `scripts/` - Utility scripts
  - Database scripts
  - Maintenance scripts
- `logs/` - Application logs
  - Error logs
  - Access logs
- `creds/` - Credential files
  - API keys
  - Service credentials
- `deployment/` - Deployment configurations
  - AWS configurations
  - Environment-specific settings
- `.ebextensions/` - Elastic Beanstalk configurations
  - Environment variables
  - Container configurations
- `.github/` - GitHub Actions workflows
  - CI/CD pipelines
  - Automated testing

Key files:
- `app.py` - Main application entry point and Flask app configuration
- `database.py` - Database connection and operations
- `schemas.py` - API request/response schemas and validation
- `requirements.txt` - Python dependencies and versions
- `alembic.ini` - Database migration configuration
- `create_db.py` - Database initialization script
- `init_db.py` - Database setup script
- `run.sh` - Application startup script
- `Procfile` - Process manager configuration for deployment

## Infrastructure

The project uses Terraform for infrastructure management:

- `terraform/` - Production environment infrastructure
- `terraform_uat/` - UAT environment infrastructure

## Deployment

Deployment-related files and scripts:

- `deployment/` - Deployment configurations and scripts
- `.elasticbeanstalk/` - AWS Elastic Beanstalk configurations
- `deploy-*.sh` - Various deployment scripts for different services

## Other files

- commands.sh - Stores key shell commands such as deployment, etc as a quick reference
- commands.sql - Stores SQL commands as a reference

## Development Guidelines

1. Frontend development should be done in the `frontend/` directory
2. Backend development should be done in the `backend/` directory
3. Infrastructure changes should be made in the appropriate `terraform/` directory
4. All deployment scripts should be tested in UAT before production
5. Follow the respective README files in each directory for specific setup instructions
