name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: './backend/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install awsebcli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Create production environment file
        run: |
          cp .env.uat .env.prod
          # Update environment variables if needed
          sed -i 's/POSTGRES_HOST=localhost/POSTGRES_HOST=${RDS_HOSTNAME}/g' .env.prod
          sed -i 's/POSTGRES_PORT=5432/POSTGRES_PORT=${RDS_PORT}/g' .env.prod
          sed -i 's/POSTGRES_DB=aolf_gsec/POSTGRES_DB=${RDS_DB_NAME}/g' .env.prod
          sed -i 's/POSTGRES_USER=postgres/POSTGRES_USER=${RDS_USERNAME}/g' .env.prod
          sed -i 's/POSTGRES_PASSWORD=postgres/POSTGRES_PASSWORD=${RDS_PASSWORD}/g' .env.prod

      - name: Store parameters in AWS Parameter Store
        run: |
          # Load environment variables from .env.prod
          source .env.prod
          
          # Store parameters
          aws ssm put-parameter --name RDS_USERNAME --value "${{ secrets.RDS_USERNAME }}" --type SecureString --overwrite
          aws ssm put-parameter --name RDS_PASSWORD --value "${{ secrets.RDS_PASSWORD }}" --type SecureString --overwrite
          aws ssm put-parameter --name JWT_SECRET_KEY --value "${{ secrets.JWT_SECRET_KEY }}" --type SecureString --overwrite
          aws ssm put-parameter --name GOOGLE_CLIENT_ID --value "${{ secrets.GOOGLE_CLIENT_ID }}" --type SecureString --overwrite
          aws ssm put-parameter --name SENDGRID_API_KEY --value "${{ secrets.SENDGRID_API_KEY }}" --type SecureString --overwrite

      - name: Initialize Elastic Beanstalk
        run: |
          eb init aolf-gsec-backend -p python-3.12 --region us-east-2

      - name: Deploy to Elastic Beanstalk
        run: |
          # Check if environment exists
          if eb status aolf-gsec-backend-prod 2>&1 | grep -q "Environment aolf-gsec-backend-prod"; then
            echo "Environment exists, deploying updates..."
            eb deploy aolf-gsec-backend-prod
          else
            echo "Creating new environment..."
            eb create aolf-gsec-backend-prod \
              --database \
              --database.engine postgres \
              --database.instance db.t3.micro \
              --database.size 5 \
              --database.username "{{resolve:ssm:RDS_USERNAME:1}}" \
              --database.password "{{resolve:ssm:RDS_PASSWORD:1}}"
            
            # Configure environment variables
            eb setenv ENVIRONMENT=prod \
              "POSTGRES_HOST=\${RDS_HOSTNAME}" \
              "POSTGRES_PORT=\${RDS_PORT}" \
              "POSTGRES_DB=\${RDS_DB_NAME}" \
              "POSTGRES_USER=\${RDS_USERNAME}" \
              "POSTGRES_PASSWORD=\${RDS_PASSWORD}" \
              "JWT_SECRET_KEY={{resolve:ssm:JWT_SECRET_KEY:1}}" \
              "GOOGLE_CLIENT_ID={{resolve:ssm:GOOGLE_CLIENT_ID:1}}" \
              "SENDGRID_API_KEY={{resolve:ssm:SENDGRID_API_KEY:1}}" \
              "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" \
              ENABLE_EMAIL=true \
              "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
              "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              AWS_REGION=us-east-2 \
              "S3_BUCKET_NAME=aolf-gsec-uat"
          fi

      - name: Verify deployment
        run: |
          # Wait for deployment to complete
          sleep 60
          
          # Check deployment status
          eb status aolf-gsec-backend-prod
          
          # Get the application URL
          APP_URL=$(eb status aolf-gsec-backend-prod | grep CNAME | awk '{print $2}')
          echo "Application URL: http://$APP_URL"
          
          # Test the application
          curl -s -o /dev/null -w "%{http_code}" "http://$APP_URL/docs" || echo "Application not accessible yet" 